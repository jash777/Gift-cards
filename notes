from flask import Blueprint, jsonify, request, current_app
from app.db import get_db_connection, encrypt_mnemonic, decrypt_mnemonic
from hdwallet import BIP44HDWallet
from hdwallet.cryptocurrencies import EthereumMainnet
from hdwallet.utils import generate_mnemonic
import secrets
from mysql.connector import Error
from datetime import datetime
from typing import Optional
from cryptography.fernet import Fernet
import os
import logging


bp = Blueprint('routes', __name__)

def generate_key():
    """Generate a new Fernet key for encryption."""
    return Fernet.generate_key()

def get_hdwallet(mnemonic: str, derivation_path: Optional[str] = None) -> BIP44HDWallet:
    hdwallet: BIP44HDWallet = BIP44HDWallet(cryptocurrency=EthereumMainnet)
    hdwallet.from_mnemonic(mnemonic=mnemonic, language="english")
    
    if derivation_path:
        hdwallet.from_path(path=derivation_path)
    return hdwallet

@bp.route('/generate_mnemonic', methods=['POST'])
def generate_and_store_mnemonic():
    """Generate a new mnemonic and store it encrypted in the database."""
    key = generate_key()
    mnemonic = generate_mnemonic(language="english", strength=128)
    encrypted_mnemonic = encrypt_mnemonic(mnemonic, key)
    
    conn = get_db_connection()
    if not conn:
        current_app.logger.error("Database connection failed")
        return jsonify({"error": "Database connection failed"}), 500

    try:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO mnemonics (encrypted_mnemonic, encryption_key)
            VALUES (%s, %s)
        ''', (encrypted_mnemonic, key))
        conn.commit()
        logging.info("Mnemonic generated and stored successfully")
        return jsonify({"message": "Mnemonic generated and stored successfully"}), 200
    except Error as e:
        conn.rollback()
        current_app.logger.error(f"Error storing mnemonic: {e}")
        return jsonify({"error": str(e)}), 500
    finally:
        conn.close()

@bp.route('/walletaddress', methods=['POST'])
def assign_wallet_address():
    """Assign a new wallet address based on the stored mnemonic."""
    conn = get_db_connection()
    if not conn:
        current_app.logger.error("Database connection failed")
        return jsonify({"error": "Database connection failed"}), 500

    try:
        cursor = conn.cursor(dictionary=True)
        
        # Get the latest mnemonic
        cursor.execute('SELECT encrypted_mnemonic, encryption_key FROM mnemonics ORDER BY id DESC LIMIT 1')
        mnemonic_record = cursor.fetchone()
        if not mnemonic_record:
            current_app.logger.error("Mnemonic not found. Attempting to generate a new one.")
            result = generate_and_store_mnemonic()
            if isinstance(result, tuple) and result[1] != 200:
                return result
            
            cursor.execute('SELECT encrypted_mnemonic, encryption_key FROM mnemonics ORDER BY id DESC LIMIT 1')
            mnemonic_record = cursor.fetchone()
            if not mnemonic_record:
                current_app.logger.error("Failed to generate and retrieve new mnemonic")
                return jsonify({"error": "Failed to generate and retrieve new mnemonic"}), 500

        logging.info(f"Mnemonic record retrieved: {mnemonic_record}")
        
        try:
            decrypted_mnemonic = decrypt_mnemonic(mnemonic_record['encrypted_mnemonic'], mnemonic_record['encryption_key'])
        except Exception as e:
            current_app.logger.error(f"Failed to decrypt mnemonic: {str(e)}")
            return jsonify({"error": "Failed to decrypt mnemonic"}), 500

        logging.info("Mnemonic decrypted successfully")
        
        # Generate a new unique derivation path
        max_attempts = 10
        for attempt in range(max_attempts):
            cursor.execute("SELECT MAX(CAST(SUBSTRING_INDEX(derivation_path, '/', -1) AS UNSIGNED)) as max_index FROM wallet_addresses")
            result = cursor.fetchone()
            index = (result['max_index'] or -1) + 1 + attempt
            derivation_path = f"m/44'/60'/0'/0/{index}"
            
            # Check if this derivation path already exists
            cursor.execute("SELECT COUNT(*) as count FROM wallet_addresses WHERE derivation_path = %s", (derivation_path,))
            if cursor.fetchone()['count'] == 0:
                break
        else:
            current_app.logger.error(f"Failed to generate a unique derivation path after {max_attempts} attempts")
            return jsonify({"error": "Failed to generate a unique derivation path"}), 500

        logging.info(f"Generated unique derivation path: {derivation_path}")
        
        # Get the wallet for this derivation path
        try:
            hdwallet = get_hdwallet(decrypted_mnemonic, derivation_path)
            address = hdwallet.address()
        except Exception as e:
            current_app.logger.error(f"Failed to generate wallet address: {str(e)}")
            return jsonify({"error": "Failed to generate wallet address"}), 500

        logging.info(f"Wallet address generated: {address}")
        
        # Generate a unique name for the address
        name = f"GiftCard-{secrets.token_hex(4)}"
        
        # Insert new address into database
        try:
            cursor.execute('''
                INSERT INTO wallet_addresses (address, name, derivation_path)
                VALUES (%s, %s, %s)
            ''', (address, name, derivation_path))
            conn.commit()
        except Error as e:
            conn.rollback()
            current_app.logger.error(f"Failed to insert new wallet address: {str(e)}")
            return jsonify({"error": "Failed to insert new wallet address"}), 500

        # Fetch the inserted record
        cursor.execute('SELECT * FROM wallet_addresses WHERE address = %s', (address,))
        wallet_info = cursor.fetchone()
        
        current_app.logger.info(f"New wallet address assigned: {address}")
        
        return jsonify({
            "id": wallet_info['id'],
            "address": wallet_info['address'],
            "name": wallet_info['name'],
            "created_at": wallet_info['created_at'].isoformat()
        }), 200
    except Error as e:
        conn.rollback()
        current_app.logger.error(f"Error assigning wallet address: {e}")
        return jsonify({"error": str(e)}), 500
    finally:
        if conn:
            conn.close()